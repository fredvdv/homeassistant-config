substitutions:
  name: esphome-web-a142c8
  friendly_name: Garage
packages:
  base: !include common/base.yaml

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}

esp32:
  board: esp32dev
  framework:
    type: arduino

api:
  encryption:
    key: RXR3bYhhfGhAyJgIRypD1zIGWHCBrkS0HDAC6DPBBBK=
    
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

i2c:
  sda: GPIO21
  scl: GPIO22

switch:
  - platform: gpio
    name: Garage Relay
    id: garage_door_relay
    pin:
      number: GPIO26
      inverted: true
    restore_mode: ALWAYS_OFF 
  - platform: gpio
    name: Relay 2
    id: relay2
    pin:
      number: GPIO25
      inverted: true
    restore_mode: ALWAYS_OFF 
  - platform: gpio
    name: Relay 3
    id: relay3
    pin:
      number: GPIO33
      inverted: true
    restore_mode: ALWAYS_OFF 
  - platform: gpio
    name: Relay 4
    id: relay4
    pin:
      number: GPIO32
      inverted: true
    restore_mode: ALWAYS_OFF 

button:
  - platform: template
    name: Bouton Garage
    id: garage_door_button
    icon: mdi:button-pointer
    on_press:
      - switch.turn_on: garage_door_relay
      - delay: 500ms
      - switch.turn_off: garage_door_relay

binary_sensor:
  - platform: gpio
    name: Porte Garage Ouvert
    id: garage_door_open
    pin: 
      number: GPIO18 # Capteur "fermé"
      mode: INPUT_PULLUP
      inverted: true
    
  - platform: gpio
    name: Porte Garage Fermé
    id: garage_door_closed
    pin: 
      number: GPIO19 # Capteur "ouvert"
      mode: INPUT_PULLUP
      inverted: true

sensor:
   # État de la porte de garage
  - platform: template
    name: Porte Garage Position
    id: garage_door_position
    # 0: Fermé
    # 1: Ouvert
    # 2: En mouvement
    # garage_door_closed / garage_door_open
    lambda: |-
      if (id(garage_door_closed).state) {
        return 0;
      } else if (id(garage_door_open).state) {
        return 2;
      } else {
        return 1;
      }
    update_interval: 1s
    icon: "mdi:garage"

  # Water Tank Level  
  - platform: ina219
    address: 0x40
    shunt_resistance: 0.1 ohm
    current:
      name: Water Tank Current
      id: water_tank_current
      accuracy_decimals: 2
      filters:
      - multiply: 1000 # convert from Amps to mA
      unit_of_measurement: "mA"
    power:
      name: Water Tank Power
      id: water_tank_power
    bus_voltage:
      name: Water Tank Bus Voltage
      id: water_tank_bus_voltage
    shunt_voltage:
      name: Water Tank Shunt Voltage
      id: water_tank_shunt_voltage
    max_voltage: 24.0V
    max_current: 0.20A
    update_interval: 60s

  - platform: template
    name: "Water Tank Level (Litres)"
    id: water_tank_level_liters
    unit_of_measurement: "L"
    accuracy_decimals: 0
    update_interval: 60s
    lambda: |-
      // Conversion de la valeur du capteur en litres
      float current = id(water_tank_current).state;
      if (current < 4.0) {
        return 0.0;  // Si la valeur est en dessous de 4mA, niveau vide
      } else if (current > 8.4) {
        return 5000.0;  // Si la valeur est au-dessus de 8.4mA, niveau plein
      }
      return (current - 4.0) / (8.4 - 4.0) * 5000.0;

  - platform: template
    name: "Water Tank Level (%)"
    id: water_tank_level_pct
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 60s
    lambda: |-
      // Conversion de la valeur en pourcentage
      float current = id(water_tank_current).state;
      if (current < 4.0) {
        return 0.0;  // Si la valeur est en dessous de 4mA, niveau vide
      } else if (current > 8.4) {
        return 100.0;  // Si la valeur est au-dessus de 8.4mA, niveau plein
      }
      float litres = (current - 4.0) / (8.4 - 4.0) * 5000.0;
      return (litres / 5000.0) * 100.0;    
